.TH "m4queue-intro" "cware" "Oct 07, 2022" "" "C-Ware Manuals"
.SH NAME
m4queue-intro - a guide to how m4queue works, and how to use it
.SH SYNOPSIS
#include "m4queue/m4queue.m4"
.br
A table of contents.

\fBDESCRIPTION\fR
.RS 0.4i
An introduction to how m4queue works.
.RE


.SH DESCRIPTION
What separates this queue implementation from the others is that
when you pop something off of the front of the queue, rather than
shift everything, the "head pointer" will increment.

|---|
.br
| 3 |
.br
| 2 |
.br
| 1 | <--- Head pointer
.br
|---|
.br

Imagine this queue, where items are enqueued in the order 1 2 3.
If we were to dequeue something from it, the value would be removed,
but the head pointer will be shifted back.

|---|
.br
| 3 |
.br
| 2 | <--- Head pointer
.br
|   |
.br
|---|
.br

The head pointer tells the queue where the first item is.  If we do
dequeue from it again, then we get:

|---|
.br
| 3 | <--- Head pointer
.br
|   |
.br
|   |
.br
|---|
.br

Now, if we enqueue to it each item will be "pushed" to the front of
the queue, and the head pointer will be reset to the front of the
queue. Once that happens, item is added to the back of the queue.

|---|
.br
|   |
.br
| 4 |
.br
| 3 | <--- Head pointer
.br
|---|
.br

Since adding to the queue pushes everything to the front of the
queue, it essentially 'resets' the queue to its initial state.
When the length of the queue reaches maximum capacity, then it
will be resized.
